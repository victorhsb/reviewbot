// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	service "github.com/victorhsb/review-bot/backend/service"

	uuid "github.com/google/uuid"
)

// MessageStorage is an autogenerated mock type for the MessageStorage type
type MessageStorage struct {
	mock.Mock
}

type MessageStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MessageStorage) EXPECT() *MessageStorage_Expecter {
	return &MessageStorage_Expecter{mock: &_m.Mock}
}

// GetUserByID provides a mock function with given fields: _a0, _a1
func (_m *MessageStorage) GetUserByID(_a0 context.Context, _a1 uuid.UUID) (service.User, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 service.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (service.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) service.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(service.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessageStorage_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MessageStorage_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uuid.UUID
func (_e *MessageStorage_Expecter) GetUserByID(_a0 interface{}, _a1 interface{}) *MessageStorage_GetUserByID_Call {
	return &MessageStorage_GetUserByID_Call{Call: _e.mock.On("GetUserByID", _a0, _a1)}
}

func (_c *MessageStorage_GetUserByID_Call) Run(run func(_a0 context.Context, _a1 uuid.UUID)) *MessageStorage_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MessageStorage_GetUserByID_Call) Return(_a0 service.User, _a1 error) *MessageStorage_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MessageStorage_GetUserByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (service.User, error)) *MessageStorage_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListMessagesByUserID provides a mock function with given fields: _a0, _a1
func (_m *MessageStorage) ListMessagesByUserID(_a0 context.Context, _a1 uuid.UUID) ([]service.Message, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListMessagesByUserID")
	}

	var r0 []service.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]service.Message, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []service.Message); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessageStorage_ListMessagesByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMessagesByUserID'
type MessageStorage_ListMessagesByUserID_Call struct {
	*mock.Call
}

// ListMessagesByUserID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uuid.UUID
func (_e *MessageStorage_Expecter) ListMessagesByUserID(_a0 interface{}, _a1 interface{}) *MessageStorage_ListMessagesByUserID_Call {
	return &MessageStorage_ListMessagesByUserID_Call{Call: _e.mock.On("ListMessagesByUserID", _a0, _a1)}
}

func (_c *MessageStorage_ListMessagesByUserID_Call) Run(run func(_a0 context.Context, _a1 uuid.UUID)) *MessageStorage_ListMessagesByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MessageStorage_ListMessagesByUserID_Call) Return(_a0 []service.Message, _a1 error) *MessageStorage_ListMessagesByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MessageStorage_ListMessagesByUserID_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]service.Message, error)) *MessageStorage_ListMessagesByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function with given fields: _a0
func (_m *MessageStorage) ListUsers(_a0 context.Context) ([]service.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 []service.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]service.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []service.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessageStorage_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MessageStorage_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MessageStorage_Expecter) ListUsers(_a0 interface{}) *MessageStorage_ListUsers_Call {
	return &MessageStorage_ListUsers_Call{Call: _e.mock.On("ListUsers", _a0)}
}

func (_c *MessageStorage_ListUsers_Call) Run(run func(_a0 context.Context)) *MessageStorage_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MessageStorage_ListUsers_Call) Return(_a0 []service.User, _a1 error) *MessageStorage_ListUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MessageStorage_ListUsers_Call) RunAndReturn(run func(context.Context) ([]service.User, error)) *MessageStorage_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// SaveMessage provides a mock function with given fields: _a0, _a1
func (_m *MessageStorage) SaveMessage(_a0 context.Context, _a1 service.Message) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SaveMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, service.Message) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessageStorage_SaveMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveMessage'
type MessageStorage_SaveMessage_Call struct {
	*mock.Call
}

// SaveMessage is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 service.Message
func (_e *MessageStorage_Expecter) SaveMessage(_a0 interface{}, _a1 interface{}) *MessageStorage_SaveMessage_Call {
	return &MessageStorage_SaveMessage_Call{Call: _e.mock.On("SaveMessage", _a0, _a1)}
}

func (_c *MessageStorage_SaveMessage_Call) Run(run func(_a0 context.Context, _a1 service.Message)) *MessageStorage_SaveMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service.Message))
	})
	return _c
}

func (_c *MessageStorage_SaveMessage_Call) Return(_a0 error) *MessageStorage_SaveMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessageStorage_SaveMessage_Call) RunAndReturn(run func(context.Context, service.Message) error) *MessageStorage_SaveMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMessageStorage creates a new instance of MessageStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageStorage {
	mock := &MessageStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
